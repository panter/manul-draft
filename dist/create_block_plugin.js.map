{"version":3,"sources":["../src/create_block_plugin.js"],"names":["BlockComponent","isEditing","Component","blockPluginProps","data","container","schema","i18nNamespace","hasCustomHover","dataMap","fromJS","component","ButtonComponent","showDialogInitially","type","onChange","editorState","addPlugin","showDialog","clean","e","preventDefault","schemaDef","pppp","Boolean","buttonComponent","blockComponent"],"mappings":"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","file":"create_block_plugin.js","sourcesContent":["import { T } from '@panter/manul-i18n';\nimport { insertDataBlock } from 'megadraft';\nimport React from 'react';\n\nimport Immutable from 'immutable';\n\nimport ButtonAddPlugin from './components/button_add_plugin';\nimport PluginEditableComponent from './containers/plugin_editable_component';\nimport wrapInSimpleSchema from './utils/wrap_in_simpleschema';\n\nconst BlockComponent = ({\n  isEditing,\n  Component,\n  blockPluginProps,\n  data,\n  container,\n  schema,\n  i18nNamespace,\n  hasCustomHover\n}) => {\n  const dataMap = Immutable.fromJS(data);\n  const component = (\n    <Component {...blockPluginProps} {...data} isEditing={isEditing} />\n  );\n\n  // show the render-component when not in editmode or if the plugin has no schema\n  if (!isEditing) {\n    return component;\n  }\n  return (\n    <PluginEditableComponent\n      schema={schema}\n      i18nNamespace={i18nNamespace}\n      dataMap={dataMap}\n      container={container}\n      hasCustomHover={hasCustomHover}\n    >\n      {component}\n    </PluginEditableComponent>\n  );\n};\n\nconst ButtonComponent = ({\n  i18nNamespace,\n  showDialogInitially,\n  type,\n  schema,\n  onChange,\n  editorState\n}) => {\n  const addPlugin = () => {\n    const data = {\n      type,\n      showDialog: showDialogInitially,\n      ...(schema ? schema.clean({}) : {})\n    };\n\n    // Calls the onChange method with the new state.\n    onChange(insertDataBlock(editorState, data));\n  };\n  return (\n    <ButtonAddPlugin\n      onClick={e => {\n        e.preventDefault();\n        addPlugin({ onChange, editorState });\n      }}\n    >\n      <T _id={[`${i18nNamespace}.add`, `${i18nNamespace}.label`]} />\n    </ButtonAddPlugin>\n  );\n};\n/* eslint react/display-name: 0*/\nexport default ({\n  type,\n  i18nNamespace = `cm.${type}`,\n  schema: schemaDef = null,\n  Component,\n  hasCustomHover\n}) => pppp => {\n  const { blockPluginProps, isEditing } = pppp;\n  const schema = schemaDef && wrapInSimpleSchema(schemaDef);\n\n  const showDialogInitially = Boolean(schema); // if has schema\n\n  return {\n    // A unique plugin name used to identify the plugin and its blocks\n    type,\n    // React component to be rendered in the block sidebar\n    buttonComponent: ({ onChange, editorState }) => (\n      <ButtonComponent\n        showDialogInitially={showDialogInitially}\n        i18nNamespace={i18nNamespace}\n        onChange={onChange}\n        editorState={editorState}\n        type={type}\n        schema={schema}\n      />\n    ),\n    // React component for rendering the content block\n    blockComponent: ({ data, container }) => (\n      <BlockComponent\n        key={isEditing}\n        schema={schema}\n        isEditing={isEditing}\n        data={data}\n        container={container}\n        Component={Component}\n        blockPluginProps={blockPluginProps}\n        hasCustomHover={hasCustomHover}\n        i18nNamespace={i18nNamespace}\n      />\n    )\n  };\n};\n"]}