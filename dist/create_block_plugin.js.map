{"version":3,"sources":["../src/create_block_plugin.js"],"names":["BlockComponent","isEditing","Component","blockPluginProps","data","container","schema","i18nNamespace","hasCustomHover","dataMap","fromJS","ButtonComponent","onClick","onChange","type","showDialogInitially","editorState","e","preventDefault","showDialog","clean","schemaDef","PureComponent","Boolean","buttonComponent","blockComponent"],"mappings":"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","file":"create_block_plugin.js","sourcesContent":["import { T } from '@panter/manul-i18n';\nimport { insertDataBlock } from 'megadraft';\nimport { withHandlers, pure } from 'recompose';\nimport React from 'react';\nimport Immutable from 'immutable';\nimport ButtonAddPlugin from './components/button_add_plugin';\nimport PluginEditableComponent from './containers/plugin_editable_component';\nimport wrapInSimpleSchema from './utils/wrap_in_simpleschema';\n\nconst BlockComponent = ({\n  isEditing,\n  Component,\n  blockPluginProps,\n  data,\n  container,\n  schema,\n  i18nNamespace,\n  hasCustomHover\n}) => {\n  // show the render-component when not in editmode\n  if (!isEditing) {\n    return <Component {...blockPluginProps} {...data} />;\n  }\n  const dataMap = Immutable.fromJS(data);\n\n  return (\n    <PluginEditableComponent\n      schema={schema}\n      i18nNamespace={i18nNamespace}\n      dataMap={dataMap}\n      container={container}\n      hasCustomHover={hasCustomHover}\n    >\n      <Component {...blockPluginProps} {...data} isEditing />\n    </PluginEditableComponent>\n  );\n};\n\nconst ButtonComponent = pure(\n  withHandlers({\n    onClick: ({\n      onChange,\n      type,\n      schema,\n      showDialogInitially,\n      editorState\n    }) => e => {\n      e.preventDefault();\n      const data = {\n        type,\n        showDialog: showDialogInitially,\n        ...(schema ? schema.clean({}) : {})\n      };\n\n      // Calls the onChange method with the new state.\n      onChange(insertDataBlock(editorState, data));\n    }\n  })(({ i18nNamespace, onClick }) => (\n    <ButtonAddPlugin onClick={onClick}>\n      <T _id={[`${i18nNamespace}.add`, `${i18nNamespace}.label`]} />\n    </ButtonAddPlugin>\n  ))\n);\n/* eslint react/display-name: 0*/\nexport default ({\n  type,\n  i18nNamespace = `cm.${type}`,\n  schema: schemaDef = null,\n  Component,\n  hasCustomHover\n}) => ({ blockPluginProps, isEditing }) => {\n  const schema = schemaDef && wrapInSimpleSchema(schemaDef);\n  const PureComponent = pure(Component);\n  const showDialogInitially = Boolean(schema); // if has schema\n\n  return {\n    // A unique plugin name used to identify the plugin and its blocks\n    type,\n    // React component to be rendered in the block sidebar\n    buttonComponent: ({ onChange, editorState }) => (\n      <ButtonComponent\n        showDialogInitially={showDialogInitially}\n        i18nNamespace={i18nNamespace}\n        onChange={onChange}\n        editorState={editorState}\n        type={type}\n        schema={schema}\n      />\n    ),\n    // React component for rendering the content block\n    blockComponent: ({ data, container }) => (\n      <BlockComponent\n        key={isEditing}\n        schema={schema}\n        isEditing={isEditing}\n        data={data}\n        container={container}\n        Component={PureComponent}\n        blockPluginProps={blockPluginProps}\n        hasCustomHover={hasCustomHover}\n        i18nNamespace={i18nNamespace}\n      />\n    )\n  };\n};\n"]}