{"version":3,"sources":["../../src/containers/content_area.js"],"names":["dataComposer","onData","context","contentId","entities","sampleContent","Meteor","Collections","i18n","contentLoaded","subscribe","ready","locale","getLocale","content","Contents","findOne","initialEditorState","CompositeDecorator","stateComposer","LocalState","Roles","canEdit","userIsInRole","userId","cancelEditing","delete","isEditing","equals","startEditing","set","i18nComposer","editorState","setEditorState","manulDraft","highlightEditable","copyLocales","value","copyFromLocale","fromContent","fromLocale","newContentState","convertFromRaw","newContent","Modifier","replaceWithFragment","getCurrentContent","getSelection","getBlockMap","newEditorState","EditorState","push","depsMapper","actions","save","cm","saveAndClose","editor","convertToRaw","error","saveAndEdit","cancel","blockPluginDialogIsActive","block","getData","get","getBlocksAsArray","blockPluginProps","blockPlugins","megadraftBlockPlugins","map","plugin","entityInputs","e","inputComponent"],"mappings":"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","file":"content_area.js","sourcesContent":["import {\n  withProps,\n  withState,\n  withPropsOnChange,\n  withHandlers,\n  onlyUpdateForKeys\n} from 'recompose';\nimport { DraftJS, editorStateFromRaw } from 'megadraft';\n\nimport {\n  any,\n  invoke,\n  defer,\n  keys,\n  filter,\n  isEmpty,\n  flow,\n  get,\n  keyBy,\n  mapValues\n} from 'lodash/fp';\nimport { useDeps, composeAll } from '@storybook/mantra-core';\n\nimport ContentArea from '../components/content_area';\nimport composeWithTracker from '../utils/composeWithTracker';\n\nexport const dataComposer = (\n  { context, contentId, entities = [], sampleContent = null },\n  onData\n) => {\n  const { Meteor, Collections, i18n } = context();\n  const contentLoaded = Meteor.subscribe('contents.one', contentId).ready();\n  const locale = i18n.getLocale();\n  const content = Collections.Contents.findOne(contentId);\n\n  if (contentLoaded) {\n    const initialEditorState = editorStateFromRaw(\n      content ? get(`value.${locale}`, content) : sampleContent,\n      new DraftJS.CompositeDecorator(entities || [])\n    );\n    onData(null, { content, locale, initialEditorState });\n  }\n};\n\nexport const stateComposer = ({ context, contentId }, onData) => {\n  const { LocalState, Roles, Meteor } = context();\n  const canEdit = Roles.userIsInRole(Meteor.userId(), 'admin');\n  const cancelEditing = () => LocalState.delete('cm.editingMode');\n  const isEditing = LocalState.equals('cm.editingMode', contentId);\n  const startEditing = () => LocalState.set('cm.editingMode', contentId);\n  onData(null, { canEdit, isEditing, cancelEditing, startEditing });\n};\n\nexport const i18nComposer = (\n  { context, content, editorState, setEditorState },\n  onData\n) => {\n  const { manulDraft } = context();\n  const highlightEditable = invoke('highlightEditable', manulDraft);\n  // keys in value are locales where we can copy from\n  const copyLocales =\n    content &&\n    flow(\n      keys,\n      filter(locale => !isEmpty(get(['value', locale], content)))\n    )(content.value);\n\n  const copyFromLocale = fromLocale => {\n    // clone the content\n    const fromContent = get(`value.${fromLocale}`, content);\n    if (fromContent) {\n      // some draftjs voodoo to insert the rawContent into the current selection\n      const newContentState = DraftJS.convertFromRaw(fromContent);\n      const newContent = DraftJS.Modifier.replaceWithFragment(\n        editorState.getCurrentContent(),\n        editorState.getSelection(),\n        newContentState.getBlockMap()\n      );\n      const newEditorState = DraftJS.EditorState.push(\n        editorState,\n        newContent,\n        'insert-fragment'\n      );\n      setEditorState(newEditorState);\n    }\n  };\n  onData(null, { copyLocales, highlightEditable, copyFromLocale });\n};\n\nexport const depsMapper = (context, actions) => ({\n  context: () => context,\n  save: actions.cm.save,\n  ...context.manulDraft\n});\n\nexport default composeAll(\n  composeWithTracker(i18nComposer),\n  // wait for https://github.com/acdlite/recompose/issues/259\n  // this here is a dirty workaround\n  withPropsOnChange(\n    ['initialEditorState'],\n    ({ initialEditorState, setEditorState }) => {\n      /* eslint lodash-fp/no-unused-result: 0*/\n      defer(() => setEditorState(initialEditorState));\n    }\n  ),\n  withHandlers({\n    saveAndClose: ({\n      save,\n      cancelEditing,\n      editorState,\n      contentId,\n      locale\n    }) => () => {\n      save(\n        {\n          contentId,\n          locale,\n          editor: DraftJS.convertToRaw(editorState.getCurrentContent())\n        },\n        error => !error && cancelEditing(false)\n      );\n    },\n    saveAndEdit: ({ save, editorState, contentId, locale }) => () => {\n      save({\n        contentId,\n        locale,\n        editor: DraftJS.convertToRaw(editorState.getCurrentContent())\n      });\n    },\n    cancel: ({ cancelEditing, setEditorState, initialEditorState }) => () => {\n      setEditorState(initialEditorState);\n      cancelEditing(false);\n    }\n  }),\n  withProps(({ editorState }) => ({\n    blockPluginDialogIsActive: any(block => block.getData().get('showDialog'))(\n      editorState.getCurrentContent().getBlocksAsArray()\n    )\n  })),\n  withState(\n    'editorState',\n    'setEditorState',\n    ({ initialEditorState }) => initialEditorState\n  ),\n  composeWithTracker(dataComposer),\n  withProps(\n    ({\n      blockPluginProps = {},\n      isEditing,\n      entities = [],\n      blockPlugins = []\n    }) => ({\n      megadraftBlockPlugins: blockPlugins.map(plugin =>\n        plugin({ isEditing, blockPluginProps })\n      ),\n      entityInputs: flow(\n        keyBy('_id'),\n        mapValues(e => e.inputComponent)\n      )(entities)\n    })\n  ),\n  composeWithTracker(stateComposer),\n  useDeps(depsMapper),\n  onlyUpdateForKeys(['contentId'])\n)(ContentArea);\n"]}